
name: GitHub-Pipeline üë©‚Äçüíª

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# defaults:
#   run:
#     working-directory: frontend
    
jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  

    env:
      Solution_Name: ASP.NET.sln                          
#       Test_Project_Path: your-test-project-path                 
      Wap_Project_Directory: ASP.NET    
      Wap_Project_Path: ASP.NET/ASP.NET.csproj"                 
      # Publish_Directory: ${{ github.workspace }}/publish
      # Publish_Directory: ${{ github.workspace }}/WebApplication2-github-cicd-pipeline/publish
      # Publish_Directory: "${{ github.workspace }}/ASP.NET/bin/Release/netcoreapp3.1/publish"
      # Publish_Directory: "${{ github.workspace }}\"
      # Publish_Directory: "${{ github.workspace }}\Publish"
      # Publish_Directory: "${{ github.workspace }}/"
      Publish_Directory: "$(System.DefaultWorkingDirectory)/Publish"
      
    steps:
    - name: Checkout üîó
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Framework ‚ò∏
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Setup MSBuild.exe üèó
      # uses: microsoft/setup-msbuild@v1.0.2
      uses: microsoft/setup-msbuild@v1.0.3

    # Execute all unit tests in the solution
#     - name: Execute unit tests
#       run: dotnet test

# ___________________________________________________________________________________________________________
    - name: Setup NuGet.exe for use with actions 
      uses: NuGet/setup-nuget@v1.2.0

    - name: Restore NuGet Packages üìö
      run: nuget restore ASP.NET.sln

    - name: Build the application üí•
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      # run: msbuild /p:Configuration=Release
      # run: msbuild /p:Configuration=Release /t:Publish "Wap_Project_Path"
      env:
        Configuration: ${{ matrix.configuration }}

    # - name: Test
    #   run: dotnet test "${{ github.workspace }}/ASP.NET/ASP.NET.csproj" --no-build --verbosity normal
# ___________________________________________________________________________________________________________

    # - name: Publish the application üì¢
    #   run:  |
    #    msbuild $env:Solution_Name /t:Publish /p:OutputPath=$env:Publish_Directory

# ___________________________________________________________________________________________________________

    # - name: Publish üì¢
    #   run: |
    #     # msbuild $env:Solution_Name /p:Configuration=Release /p:PublishProfile=Publish /p:DeployOnBuild=true /p:PublishDir=\ ASP.NET/ASP.NET.csproj
    #     msbuild $env:Solution_Name /p:Configuration=Release /p:PublishProfile=Publish /p:DeployOnBuild=true /p:PublishDir=\
# ___________________________________________________________________________________________________________
    - name: Publish
      # run: dotnet publish -c Release -o ./publish-asp.net
      # run: dotnet publish -c Release -o ASP.NET.sln
      run: msbuild /p:Configuration=Release /t:Publish ASP.NET.sln


# ___________________________________________________________________________________________________________

    - name: Publish artifacts ‚òÅ
      uses: actions/upload-artifact@v2
      with:
          name: Published Code
          # path: ${{ env.Publish_Directory }}
          path: publish-asp.net

# ___________________________________________________________________________________________________________
   
    # - name: Generate deployment package
    #   run: |
    #     Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      
    #     choco install zip -y

    #     zip -r deploy.zip . -x '*.git*'


    # - name: Deploy to AWS Elastic Beanstalk üöÄ
    #   uses: einaregilsson/beanstalk-deploy@v16
    #   with:
    #       aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       application_name: "ASP.NET Application"
    #       environment_name: "ASPNETApplication-env"
    #       version_label: "v${{ github.run_number }}"
    #       region: "us-east-1"
    #       deployment_package: "deploy.zip"     

    # - name: Deployment done ‚úÖ
    #   run: echo "The deployment was successful!" 


# ___________________________________________________________________________________________________________



    # - name: Deploy to AWS EC2 üöÄ
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     key: ${{ secrets.KEY }}
    #     port: ${{ secrets.PORT }}
    #     script: |
    #       cd /home/ec2-user
    #       ls
    #       pwd
    #       # unzip deploy.zip
    #       # cd publish
    #       # ls
    #       # cd ASP.NET
    #       # ls
    #       # sudo dotnet ASP.NET.dll
    #       # cd ..
    #       # cd ..
    #       # cd ..