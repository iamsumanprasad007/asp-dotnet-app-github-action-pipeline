
name: GitHub-Pipeline for .NET üë©‚Äçüíª

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# defaults:
#   run:
#     working-directory: frontend  
jobs:

  build:

    runs-on: windows-latest  
    # runs-on: self-hosted
    # runs-on: $ {{ matrix.os }}

    strategy:
      matrix:
        configuration: [Release]
        # os: [windows-latest, ubuntu-latest]
        # os: [windows-latest]
        # dotnet-version: [6.0.x]
        # channel: [Dev]
        # targetPlatform: [x64]
        # ChannelName: [Dev]


    env:
      Solution_Name: ASP.NET.sln                          
#       Test_Project_Path: your-test-project-path                 
      Wap_Project_Directory: ASP.NET    
      Csproj_Path: "ASP.NET/ASP.NET.csproj"                 
      # Publish_Directory: "${{ github.workspace }}/ASP.NET/bin"
      Publish_Directory: "${{ github.workspace }}/publish"
      # Publish_Directory: "${{ github.workspace }}\""

# ___________________________________________________________________________________________________________
      # PublishPath: "$(System.DefaultWorkingDirectory)"
      App_Packages_Directory: packages
      Wap_Project_Directory_Upload: ASP.NET.packages.config

      App_Packages_Archive: AS-NET.zip
      # PAT_TOKEN: "${{ secrets.PAT_TOKEN }}"
      # PublishDir: "${{ github.workspace }}/publish"
      PublishDir: "${{ github.workspace }}/publish"
      PublishUrl: D:\Artifacts
      
    
      # SONARSCANNER_RELEASE_DOWNLOADURL: https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/5.3.1.36242/sonar-scanner-msbuild-5.3.1.36242-net46.zip

      SOLUTION_PATH: ASP.NET.sln
#       SONAR_HOST: 
#       SONAR_PROJECT_KEY: 
      SONAR_PROJECT_NAME: ASP.NET
      SONAR_PROJECT_VERSION: 1.2.3
# ___________________________________________________________________________________________________________
      
    steps:
    - name: Checkout üîó
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
# --------------------------------------------------------------------------------------------------------------
    # - name: Cache dependencies
    #   id: cache-dotnet
    #   uses: actions/cache@v2
    #   with:
    #     path: ${{ env.USERPROFILE }}\.nuget\packages
    #     key: ${{ runner.os }}-dotnet-${{ hashFiles('**/ASP.NET.sln') }}

    # - name: Install .NET SDK ‚ò∏
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: 7.0.x
# --------------------------------------------------------------------------------------------------------------

    # # Install the .NET Core workload
    # - name: Install .NET Framework ‚ò∏
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: 7.0.x

    - name: Setup MSBuild.exe üèó
      # uses: microsoft/setup-msbuild@v1.0.2
      # uses: microsoft/setup-msbuild@v1.0.3
      uses: microsoft/setup-msbuild@v1.1

    # Execute all unit tests in the solution
#     - name: Execute unit tests
#       run: dotnet test
# ___________________________________________________________________________________________________________
    - name: Setup NuGet.exe for use with actions 
      uses: NuGet/setup-nuget@v1.2.0

    - name: Restore NuGet Packages üìö
      run: nuget restore ASP.NET.sln

    - name: Restore the application üí•
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      # run: msbuild /p:Configuration=Release
      # run: msbuild /p:Configuration=Release /t:Publish "Wap_Project_Path"
      env:
        Configuration: ${{ matrix.configuration }}

    # - name: Test
    #   run: dotnet test "${{ github.workspace }}/ASP.NET/ASP.NET.csproj" --no-build --verbosity normal
# ___________________________________________________________________________________________________________
    # - name: Lint code Base üßπ
    #   # uses: github/super-linter@v3
    #   uses: github/aur-actions-dotnet-lint@v1
    #   with:
    #     DEFAULT_BRANCH: main
    #     linter: dotnet-format
    #     options: --check
      # Optional: define which github-actions you want to execute. Default: all github-actions are executed
      # github-actions: eslint, markdownlint, phpstan, psscriptanalyzer, stylelint, hadolint, ansible-lint, yamllint, shellcheck, jsonlint, write-good
      # Optional: define a specific github token to use for github api (otherwise a default is used)
      # github_token: ${{ secrets.GITHUB_TOKEN }}
# ___________________________________________________________________________________________________________

    - name: Build & Publish the application üì¢
      run:  |

       msbuild $env:Csproj_Path /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PublishProfile=Default /p:PublishUrl=$env:PublishUrl
      #  msbuild $env:Csproj_Path /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PublishProfile=Default /p:PublishUrl="D:\deployedApp\newapp"

      #  msbuild $env:Csproj_Path /p:DeployOnBuild=true /p:WebPublishMethod=MSDeploy /p:DeployIisAppPath=<IISSiteName> /p:PublishProfile=Default


      #  msbuild WebApplication.csproj /p:DeployOnBuild=true /p:WebPublishMethod=MSDeploy /p:MSDeployServiceURL=<msdeployUrl> /p:DeployIisAppPath=<IISSiteName> /p:UserName=<username> /p:Password=<DeploymentPassword> /p:PublishProfile=Default

      #  msbuild WebApplication.csproj /p:DeployOnBuild=true /p:PublishUrl="C:\deployedApp\newapp"
       # msbuild WebApplication.csproj /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PublishProfile=Default
      #  msbuild WebApplication.csproj /p:DeployOnBuild=true /p:PublishProfile=<FolderProfile>
      #  msbuild $env:Solution_Name /p:Configuration=Release /p:Platform="Any CPU" /t:Build /p:PublishDir=$env:PublishDir
            
# ___________________________________________________________________________________________________________

    # - name: Publish üì¢
    #   run: |
    #     # msbuild $env:Solution_Name /p:Configuration=Release /p:PublishProfile=Publish /p:DeployOnBuild=true /p:PublishDir=\ ASP.NET/ASP.NET.csproj
    #     msbuild $env:Solution_Name /p:Configuration=Release /p:PublishProfile=Publish /p:DeployOnBuild=true /p:PublishDir=\

    # - name: Initialize CodeQL
    #   uses: github/codeql-action/init@v2


    # - name: Autobuild
    #   uses: github/codeql-action/autobuild@v2


    # - name: Perform CodeQL Analysis
    #   uses: github/codeql-action/analyze@v2 

# ___________________________________________________________________________________________________________

    # -name: Upload artifact
    #     uses: actions/upload-artifact@master
    #     with:
    #         name: ASP.NET
    #         path: ${{ env.Publish_Directory }}

    # - name: Publish Project
    #   run: msbuild /t:Publish /p:Configuration=Release /p:PublishDir=./publish/
# ___________________________________________________________________________________________________________

    - name: Publish artifacts ‚òÅ
      uses: actions/upload-artifact@v3.1.2
      with:
          name: Published Code
          # path: ${{ env.Publish_Directory }}
          # path: publish-asp.net
          # path: $env:PublishPath
          # path: ${{ env.PublishDir }}
          path: ${{ env.PublishUrl }}
          # path: d:\publish
   
    - name: configure aws credentials üîë
      uses: aws-actions/configure-aws-credentials@v2
      with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
              # role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
              # role-session-name: GitHub-Action-Role
              aws-region: us-east-1
    
    - name: Sync files to S3 üîÑ   
      run: |

        aws s3 sync D:/Artifacts s3://my-github-action-bucket


# ___________________________________________________________________________________________________________
    - name: Generate deployment package ‚ò∏
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      
        choco install zip -y

        zip -r deploy.zip . -x 's3://my-github-action-bucket/ASP.NET.zip'

      #     zip -r deploy.zip . -x '*.git*'

    - name: Deploy to AWS Beanstalk üöÄ 
      run: |
        aws elasticbeanstalk create-application-version --application-name ASPNET-Application --version-label v1 --source-bundle S3Bucket=my-github-action-bucket,S3Key=ASP.NET.zip
        aws elasticbeanstalk update-environment --environment-name ASPNETApplication-env-2 --version-label v20230523075132


# jobs:
  # deploy:

    # - name: Deploy to AWS Elastic Beanstalk üöÄ
    #   # uses: einaregilsson/beanstalk-deploy@v16
    #   uses: einaregilsson/beanstalk-deploy@v21
    #   with:
    #       aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       application_name: "ASP.NET Application"
    #       # environment_name: "ASPNETApplication-env"
    #       environment_name: "ASPNETApplication-env-1"
    #       # version_label: "v${{ github.run_number }}"
    #       version_label: "v190"

    #       region: "us-east-1"
    #       deployment_package: "deploy.zip"
    #       # deployment_package: "s3://my-github-action-bucket/ASP.NET.zip"
    #       # deployment_package: "*/ASP.NET.zip"

    # - name: Deployment done ‚úÖ
    #   run: echo "The deployment was successful!" 
      


# ___________________________________________________________________________________________________________
  create-s3-deploy:
    name: Create Deploy
    needs: build
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write
      
  # ___________________________________________________________________________________________________________
    env:
        Solution_Name: ASP.NET.sln                          
        #Test_Project_Path: your-test-project-path                 
        Wap_Project_Directory: ASP.NET    
        Csproj_Path: "ASP.NET/ASP.NET.csproj"                 
        # Publish_Directory: "${{ github.workspace }}/ASP.NET/bin"
        Publish_Directory: "${{ github.workspace }}/publish"
        # Publish_Directory: "${{ github.workspace }}\""
  
        # PublishPath: "$(System.DefaultWorkingDirectory)"
        App_Packages_Directory: packages
        Wap_Project_Directory_Upload: ASP.NET.packages.config
        
        App_Packages_Archive: ASP.NET.zip
        # PAT_TOKEN: "${{ secrets.PAT_TOKEN }}"
        # PublishDir: "${{ github.workspace }}/publish"
        PublishDir: "${{ github.workspace }}/publish"
        PublishUrl: D:\Artifacts
        
  # ___________________________________________________________________________________________________________

    steps:        
      - name: Checkout üîó
        uses: actions/checkout@v3

      # - name: configure aws credentials üîë
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
      #       # role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
      #       # role-session-name: GitHub-Action-Role
      #       aws-region: us-east-1

      # - name: Sync files to S3 üîÑ
      #   run: |
          
      #     aws s3 sync D:/Artifacts s3://my-github-action-bucket


# ___________________________________________________________________________________________________________
# create a deployment step for aws elasticbeanstalk using github actions



# ___________________________________________________________________________________________________________

    # - name: Download the artifacts
    #   uses: actions/download-artifact@v2
    #   with:
    #       name: Published Code
    #       path: ${{ env.Publish_Directory }}
  
    # - name: Publish NuGet to GitHub Packages
    #   run: |
    #     nuget sources add -username ${{ github.repository_owner }} -password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
    #     nuget setapikey ${{ secrets.GITHUB_TOKEN }} -Source "github"
    #     nuget push <NAME_OF_YOUR_PACKAGE>.nupkg -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"  
# ___________________________________________________________________________________________________________
        
    # - name: Download and Unzip SonarScanner
    #   run: |
    #       curl -L -o sonarscanner.zip ${{ env.SONARSCANNER_RELEASE_DOWNLOADURL }}
    #       Expand-Archive -Path .\sonarscanner.zip -DestinationPath .\SonarScanner -Verbose

  
    # - name: Run SonarScanner
    #   run: |
    #     SonarScanner.MSBuild.exe begin /k:"${{ env.SONAR_PROJECT_KEY }}" /n:"${{ env.SONAR_PROJECT_NAME }}" /v:"${{ env.SONAR_PROJECT_VERSION }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ env.SONAR_HOST }}"
    #     MSBuild.exe "${{ env.SOLUTION_PATH }}" /t:Rebuild
    #     SonarScanner.MSBuild.exe end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

 #___________________________________________________________________________________________________________    

    #  # Test downloading a single artifact
    # - name: Download artifact 
    #   uses: ./
    #   with:
    #     name: 'Artifact-A'
    #     path: ${{ env.Publish_Directory }}.\ASP.NET.zip  
            
          
    # - name: Create new branch
    #   run: |
    #         git checkout -b move-artifact
    #         mkdir root_artifact
    #         cp -R ${{ env.Publish_Directory }}/* root_artifact/
    #         git config --global user.email "sumanprasad9766@gmail.com"
    #         git config --global user.name "Suman prasad"
    #         git add .
    #         git commit -m "Move artifact to root folder"
    #         git push origin move-artifact
        
    # - name: Create pull request
    #   uses: peter-evans/create-pull-request@v3
    #   with:
    #         token: ${{ env.PAT_TOKEN }}
    #         branch: move-artifact
    #         title: "Move artifact to root folder"
    #         body: "This pull request moves the artifact to the root folder."
# ___________________________________________________________________________________________________________

    #     # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #       name: MSIX Package
    #       path: ${{ env.Wap_Project_Directory_Upload }}\${{ env.App_Packages_Directory }}

    # - name: Deploy to AWS EC2
    #    uses: aws-actions/aws-codedeploy-appspec-action@v1
    #    env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       APPLICATION_NAME: ASP.NET


#  ___________________________________________________________________________________________________________
    # # Archive the package
    # - name: Create archive
    #   run: Compress-Archive -Path "$env:Wap_Project_Directory_Upload\*" -DestinationPath "$env:Wap_Project_Directory_Upload\$env:App_Packages_Archive.zip" -Force


    # # Create the release:  https://github.com/actions/create-release
    # - name: Create release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ github.ref}}.${{matrix.ChannelName}}.${{ matrix.targetplatform }}
    #     release_name:  ${{ github.ref }}.${{ matrix.ChannelName }}.${{ matrix.targetplatform }}
    #     draft: false
    #     prerelease: false

    # # Upload release asset:   https://github.com/actions/upload-release-asset
    # - name: Update release asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    #     asset_path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}\${{ env.App_Packages_Archive }}
    #     asset_name: ${{ env.App_Packages_Archive }}
    #     asset_content_type: application/zip
# ___________________________________________________________________________________________________________
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   # environment: Dev
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
  #       role-session-name: GitHub-Action-Role
  #       aws-region: ${{ env.AWS_REGION }}

    # - name: Generate deployment package
    #   run: |
    #     Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      
    #     choco install zip -y

    #     zip -r deploy.zip . -x 'D:\deployedApp\newapp'

    #   #     zip -r deploy.zip . -x '*.git*'

# # jobs:
#   deploy:

#     - name: Deploy to AWS Elastic Beanstalk üöÄ
#       uses: einaregilsson/beanstalk-deploy@v16
#       with:
#           aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           application_name: "ASP.NET Application"
#           environment_name: "ASPNETApplication-env"
#           version_label: "v${{ github.run_number }}"
#           region: "us-east-1"
#           deployment_package: "deploy.zip"

#     - name: Deployment done ‚úÖ
#       run: echo "The deployment was successful!" 
# ___________________________________________________________________________________________________________


    # - name: Deploy to AWS EC2 üöÄ
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     key: ${{ secrets.KEY }}
    #     port: ${{ secrets.PORT }}
    #     script: |
    #       cd /home/ec2-user
    #       ls
    #       pwd
    #       # unzip deploy.zip
    #       # cd publish
    #       # ls
    #       # cd ASP.NET
    #       # ls
    #       # sudo dotnet ASP.NET.dll
    #       # cd ..
    #       # cd ..
    #       # cd ..

    


    