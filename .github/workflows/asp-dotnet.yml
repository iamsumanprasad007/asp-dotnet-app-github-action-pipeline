
name: GitHub-Pipeline üë©‚Äçüíª

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# defaults:
#   run:
#     working-directory: frontend
    
jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  

    env:
      Solution_Name: ASP.NET.sln                          # Replace with your solution name, i.e. MyWpfApp.sln.
#       Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: ASP.NET    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: ASP.NET/ASP.NET.csproj"                  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      # Publish_Directory: ${{ github.workspace }}/publish
      # Publish_Directory: ${{ github.workspace }}/WebApplication2-github-cicd-pipeline/publish
      # Publish_Directory: ${{ github.repository }}/publish
      # Publish_Directory: "${{ github.workspace }}\"
      Publish_Directory: "${{ github.workspace }}/"
      
    steps:
    - name: Checkout üîó
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Framework ‚ò∏
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe üèó
      # uses: microsoft/setup-msbuild@v1.0.2
      uses: microsoft/setup-msbuild@v1.0.3

    # Execute all unit tests in the solution
#     - name: Execute unit tests
#       run: dotnet test

# ___________________________________________________________________________________________________________
    - name: Setup NuGet.exe for use with actions 
      # uses: NuGet/setup-nuget@296fd3ccf8528660c91106efefe2364482f86d6f
      uses: NuGet/setup-nuget@v1.2.0
#        with:
        # NuGet version to install. Can be `latest`, `preview`, a concrete version like `5.3.1`, or a semver range specifier like `5.x`.
#       nuget-version: # optional, default is latest
        # NuGet API Key to configure.
        # nuget-api-key: # optional
        # Source to scope the NuGet API Key to.
        # nuget-api-key-source: # optional

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore NuGet Packages üìö
      run: nuget restore ASP.NET.sln

    - name: Build the application üì¢
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      # run: msbuild /p:Configuration=Release /t:Publish "Wap_Project_Path"
      env:
        Configuration: ${{ matrix.configuration }}

    # - name: Test
    #   run: dotnet test "${{ github.workspace }}/ASP.NET/ASP.NET.csproj" --no-build --verbosity normal

    - name: Publish the application
      # run: msbuild $env:Solution_Name /t:Publish /p:Configuration=$env:Configuration /p:OutputPath=bin\publish
      # run: msbuild $env:Solution_Name /t:Publish  /p:OutputPath=WebApplication2-github-cicd-pipeline/WebApplication2/bin/
      run:  |
       msbuild $env:Solution_Name /t:Publish /p:OutputPath=$env:Publish_Directory

    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
          name: Published Code
          path: ${{ env.Publish_Directory }}
          

    - name: Deploy to AWS Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v16
      with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: "ASP.NET"
          environment_name: "ASPNET-env"
          version_label: "v${{ github.run_number }}"
          region: "us-east-1"
          deployment_package: "publish"     