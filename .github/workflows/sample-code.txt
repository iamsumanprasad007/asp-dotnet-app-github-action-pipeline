
    - name: Publish artifacts ‚òÅ
      uses: actions/upload-artifact@v3.1.2
      with:
          name: Published Code
          # path: ${{ env.Publish_Directory }}
          # path: publish-asp.net
          # path: $env:PublishPath
          # path: ${{ env.PublishDir }}
          path: ${{ env.PublishUrl }}
          # path: d:\publish
   
    - name: configure aws credentials üîë
      uses: aws-actions/configure-aws-credentials@v2
      with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
              # role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
              # role-session-name: GitHub-Action-Role
              aws-region: us-east-1
    
    - name: Sync files to S3 üîÑ   
      run: |

        aws s3 sync D:/Artifacts s3://my-github-action-bucket


# ___________________________________________________________________________________________________________
    - name: Generate deployment package ‚ò∏
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      
        choco install zip -y

        zip -r deploy.zip . -x 's3://my-github-action-bucket/ASP.NET.zip'

      #     zip -r deploy.zip . -x '*.git*'

    - name: Deploy to AWS Beanstalk üöÄ 
      run: |
        aws elasticbeanstalk create-application-version --application-name ASP.NET Application --version-label v1 --source-bundle S3Bucket=my-github-action-bucket,S3Key=ASP.NET.zip
        aws elasticbeanstalk update-environment --environment-name ASPNETApplication-env --version-label v192


# # ___________________________________________________________________________________________________________
              # defender-for-devops.yml

# # ___________________________________________________________________________________________________________

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Microsoft Security DevOps (MSDO) is a command line application which integrates static analysis tools into the development cycle.
# MSDO installs, configures and runs the latest versions of static analysis tools
# (including, but not limited to, SDL/security and compliance tools).
#
# The Microsoft Security DevOps action is currently in beta and runs on the windows-latest queue,
# as well as Windows self hosted agents. ubuntu-latest support coming soon.
#
# For more information about the action , check out https://github.com/microsoft/security-devops-action
#
# Please note this workflow do not integrate your GitHub Org with Microsoft Defender For DevOps. You have to create an integration
# and provide permission before this can report data back to azure.
# Read the official documentation here : https://learn.microsoft.com/en-us/azure/defender-for-cloud/quickstart-onboard-github

name: "Microsoft Defender For Devops"

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # schedule:
  #   - cron: '37 21 * * 4'

jobs:
  MSDO:
    # currently only windows latest is supported
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x

    - name: Run Microsoft Security DevOps
      uses: microsoft/security-devops-action@v1.6.0
      id: msdo
    
    - name: Upload results to Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.msdo.outputs.sarifFile }}


# # ___________________________________________________________________________________________________________
              # codeql.yml
# # ___________________________________________________________________________________________________________

# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
  #   branches: [ "main" ]
  # pull_request:
  #   # The branches below must be a subset of the branches above
  #   branches: [ "main" ]
  # schedule:
  #   - cron: '32 8 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language ==  'windows-latest') }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      # uses: github/codeql-action/autobuild@v2
      uses: microsoft/setup-msbuild@v1.1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

# # ___________________________________________________________________________________________________________

on 24th may 2023 - adding the build and publish step and removing unnecessary nested folder


    - name: Build & Publish the application üì¢
      run: |
        msbuild $env:Csproj_Path /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PublishProfile=Default /p:OutDir=$env:PublishUrl

    - name: Remove unwanted folders
      run: |
        $unwantedFolders = @("Content", "D_C", "a", "asp-dotnet-app-github-action-pipeline")
        $unwantedFolders | ForEach-Object {
          $folderPath = Join-Path $env:PublishUrl $_
          if (Test-Path $folderPath) {
            Remove-Item -Path $folderPath -Recurse -Force
          }
        }

    - name: Publish artifacts ‚òÅ
      uses: actions/upload-artifact@v3.1.2
      with:
        name: Published Code
        path: ${{ env.PublishUrl }}

# # ___________________________________________________________________________________________________________



# # ___________________________________________________________________________________________________________




# # ___________________________________________________________________________________________________________




    - name: Zip published files
      run: |
        Compress-Archive -Path (Join-Path $env:PublishUrl "") -DestinationPath (Join-Path $env:PublishUrl "ASPNET.zip")

    - name: Publish ‚òÅ
      uses: actions/upload-artifact@v3.1.2
      with:
        name: Published Code
        path: ${{ env.PublishUrl }}/ASPNET.zip


# # ___________________________________________________________________________________________________________



# # ___________________________________________________________________________________________________________

#################      New modified codeql code:  codeql.yml ###################################


# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  # schedule:
  #   - cron: '32 8 * * 0'

jobs:
  codeql:

    name: Analyze
    runs-on: ${{ (matrix.language ==  'windows-latest') }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # Build the .NET Standard application using MSBuild
    - name: Build .NET Standard application
      uses: microsoft/setup-msbuild@v1.0.2

    - run: |
        msbuild /t:Restore 
        msbuild /t:Build /p:Configuration=Release

    # Perform CodeQL analysis on the built application
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      # with:
        # language: csharp
        # # Path to the compiled .NET Standard application
        # # Modify this path to match the location of your compiled application
        # # in your repository
        # root-directory: ./bin/Release/netstandard2.0/




# # ___________________________________________________________________________________________________________




# # ___________________________________________________________________________________________________________



# # ___________________________________________________________________________________________________________





# # ___________________________________________________________________________________________________________





# # ___________________________________________________________________________________________________________





# # ___________________________________________________________________________________________________________





# # ___________________________________________________________________________________________________________




# # ___________________________________________________________________________________________________________




# # ___________________________________________________________________________________________________________





# # ___________________________________________________________________________________________________________





# # ___________________________________________________________________________________________________________




# # ___________________________________________________________________________________________________________




# # ___________________________________________________________________________________________________________













